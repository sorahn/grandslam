// Generated by CoffeeScript 1.6.3
require.config({
  paths: {
    jquery: '../bower_components/jquery/jquery',
    bootstrap: '//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap',
    handlebars: '../bower_components/handlebars/handlebars',
    hammer: '../bower_components/hammerjs/dist/jquery.hammer'
  },
  shim: {
    bootstrap: {
      deps: ['jquery'],
      exports: 'jquery'
    },
    handlebars: {
      exports: 'Handlebars'
    },
    hammer: {
      deps: ['jquery'],
      exports: 'jquery'
    }
  }
});

require(['jquery', 'handlebars', 'hammer'], function($, hb) {
  var $main, active, ajaxMessage, createDevice, discover, discoverDevices, logMessage, tuneChannel, updateDeviceInfo, updateHwModel, updateStatus, updateTunerStatus;
  active = discover = {};
  $main = $('#js-main');
  updateStatus = function(_str, _class, _obj) {
    var $status;
    $status = $('#js-status');
    $status.text(_str);
    if (_class) {
      $status.attr('class', "text-" + _class);
    }
    return logMessage(_str, _obj);
  };
  logMessage = function(_str, _pkg, _level) {
    return console[_level || "log"](_str, (_pkg ? _pkg : void 0));
  };
  ajaxMessage = function(_data, _status, _xhr) {
    return logMessage(_xhr, _data, _status);
  };
  discoverDevices = function(_id) {
    return $.getJSON('/discover').done(function(_data) {
      var device, template;
      device = _data[0];
      discover[device.device_id] = device;
      updateStatus('waiting...', false, device);
      template = hb.compile($('#jst-alert').html());
      return $main.html(template(device));
    });
  };
  createDevice = function() {
    var id;
    id = $(this).data('id');
    return $.getJSON("/create/" + id + "/" + discover[id].device_ip).done(function(_data) {
      var template;
      active = discover[_data.device_id];
      updateStatus("connected to " + id + "!", 'success', active);
      $main.find('.js-alert').remove();
      updateDeviceInfo();
      template = hb.compile($('#jst-device').html());
      return $main.append(template(active));
    });
  };
  updateDeviceInfo = function() {
    return updateHwModel();
  };
  updateTunerStatus = function(n) {
    var $tuner, tuner;
    tuner = "tuner" + n;
    $tuner = $.getJSON("/get/" + tuner + "/status");
    $tuner.fail(ajaxMessage);
    return $tuner.done(function(data) {
      active[tuner] = data;
      return logMessage("update " + tuner + " status", data);
    });
  };
  updateHwModel = function() {
    return $.getJSON("/get/sys/hwmodel").done(function(data) {
      active.hwmodel = data;
      return logMessage('updated /sys/hwmodel', data);
    });
  };
  tuneChannel = function(e) {
    var $tuner, channel, tuner;
    channel = $(this).data('channel');
    tuner = "tuner0";
    $tuner = $.getJSON("set/" + tuner + "/channel/" + channel);
    return $tuner.done(function(data) {
      console.log("tuned channel " + channel);
      return updateTunerStatus(0);
    });
  };
  discoverDevices();
  $main.hammer().on('tap', '#js-connect', createDevice);
  return $main.hammer().on('tap', '.js-channel', tuneChannel);
});
